import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '../../../Model/edit_model.dart';
import '../../pickers/picker.dart';
import 'package:provider/provider.dart';

class SelfPage extends StatelessWidget {
  SelfPage(
    this.name,
    this.self,

  );
  final List<String> cons = [
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
  ];
  final String? name;
  final String? self;


  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider<EditModel>(
      create: (_) => EditModel(name, self )..fetchUser(),
      child: Scaffold(
        appBar: AppBar(
          elevation: 0,
          backgroundColor: Colors.white,
          title: Stack(alignment: Alignment.center, children: [
            Text(
              'editpage',
              style: TextStyle(color: Colors.black),
            ),
          ]),
          actions: <Widget>[
            Consumer<EditModel>(builder: (context, model, child) {
              return Align(
                alignment: Alignment.centerRight,
                child: TextButton(
                    onPressed: () async {
                      try {
                        // await model.update();
                        // Navigator.of(context).push(
                        //   MaterialPageRoute(builder: (context)=>
                        //         MyPage(model.name, model.area, model.pickertext1,model.pickertext2,''),
                        // ),);
                      } catch (e) {
                        final snackBar = SnackBar(
                          content: Text(e.toString()),
                        );
                        ScaffoldMessenger.of(context).showSnackBar(snackBar);
                      }
                      print('保存しました');
                    },
                    
                    style: ButtonStyle(
                      foregroundColor:
                          MaterialStateProperty.all<Color>(Colors.blue),
                    ),
                    child: Text('保存')),
              );
            }),
          ],
        ),
        body: Consumer<EditModel>(builder: (context, model, child) {
          return Column(
            children: [
              SizedBox(
                height: 300,
                child: GridView.builder(
                  padding: EdgeInsets.all(10),
                  itemCount: 6, //要素の数　表示するデータ数の最大値（texts　listの最大値）
                  // GridViewを設定する引数を指定
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisSpacing: 10, //ボックス左右間のスペース
                    mainAxisSpacing: 10, //ボックス上下間のスペース
                    crossAxisCount: 3, //ボックスを横に並べる数
                  ),
                  itemBuilder: (context, index) {
                    return Padding(
                      padding: const EdgeInsets.all(0.0),
                      child: Material(
                        borderRadius: BorderRadius.circular(15),
                        child: Container(
                          decoration: BoxDecoration(
                            border: Border.all(
                              color: Colors.grey.shade300,
                            ),
                            borderRadius: BorderRadius.circular(15),
                            color: Colors.grey.shade200,
                          ),
                          child: Column(
                            children: [
                              Center(
                                child: Text(
                                  cons[index],
                                  style: TextStyle(
                                    fontSize: 24,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
              Column(
                children: [
                  Stack(children: [
                    Container(
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: TextField(
                          // controller: model.namecontroller,
                          onChanged: (text) {
                            // model.setName(text);
                            // print('入力されました');
                          },
                          keyboardType: TextInputType.multiline,
                          maxLines: 1,
                          decoration: InputDecoration(
                            hintText: '名前',
                            border: OutlineInputBorder(),
                          ),
                        ),
                      ),
                    ),
                   
                  ]),
                  // Stack(
                  //   children: [
                  //     Container(
                  //       child: Padding(
                  //         padding: const EdgeInsets.all(8.0),
                  //         child: TextField(
                  //           controller: model.selfcontroller,
                  //           onChanged: (text) {
                  //             model.setSelf(text);
                  //             print('入力されました');
                  //           },
                  //           keyboardType: TextInputType.multiline,
                  //           maxLines: 2,
                  //           decoration: InputDecoration(
                  //             hintText: '自己紹介',
                  //             border: OutlineInputBorder(),
                  //           ),
                  //         ),
                  //       ),
                  //     ),
                     
                  //   ],
                  // ),
                  Stack(
                    children: [
                      Container(
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: TextField(
                            // controller: model.areacontroller,
                            onChanged: (text) {
                              // model.setArea(text);
                              // print('入力されました');
                            },
                            keyboardType: TextInputType.multiline,
                            maxLines: 1,
                            decoration: InputDecoration(
                              hintText: '地域',
                              border: OutlineInputBorder(),
                            ),
                          ),
                        ),
                      ),
                   
                    ],
                  ),
                  Picker('','',''),
                ],
              ),
            ],
          );
        }),
      ),
    );
  }
}
